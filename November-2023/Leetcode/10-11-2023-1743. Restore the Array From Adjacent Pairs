/**
 * @param {number[][]} adjacentPairs
 * @return {number[]}
 */
var restoreArray = function(aP) {
    const hashMap = new Map();

    for(const [num1, num2] of aP) {
        if(!hashMap.has(num1) )
            hashMap.set(num1, [])
        if(!hashMap.has(num2))
            hashMap.set(num2, [])
        
        hashMap.get(num1).push(num2);
        hashMap.get(num2).push(num1);
    }

    const res = [];

    for(const [key, val] of hashMap.entries()) {
        if(val.length ===1) {
            res.push(key, val[0]);
            break;
        }
    }

    while(res.length < aP.length+1) {
        const [lst, prev] = [res.at(-1), res.at(-2)] ;
        const curr = hashMap.get(lst);

        const next = curr[0] === prev ? curr[1] : curr[0];
        res.push(next)
    } 

    return res;
};
