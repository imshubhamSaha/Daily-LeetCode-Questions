/**
 * @param {character[]} tasks
 * @param {number} n
 * @return {number}
 */
var leastInterval = function(task, n) {
    if(n=== 0) {
      return task.length;
    }


    const freq = new Array(26).fill(0);

    for(const char of task) {
      let idx = char.charCodeAt(0) - "A".charCodeAt(0);
      freq[idx]++;
    }

    freq.sort((a,b) => a-b);

    let maxFreq = freq[25]-1;
    let idle = maxFreq * n;

    for(let i=24; i>=0 && freq[i] > 0 ; i--) {
      idle -= Math.min(maxFreq, freq[i]);
    }

    return idle>0? task.length+idle : task.length;
}


Time Complexity --> O(N LOGN);
Space Complexity --> O(26);
