/**
 * @param {character[]} letters
 * @param {character} target
 * @return {character}
 */
var nextGreatestLetter = function(letters, target) {
    for(let i=0; i<letters.length; i++) {
        if(letters[i].charCodeAt(0) > target.charCodeAt(0)) {
            return letters[i];
        }
    }
    return letters[0];
};

Time Complexity --> O(N);
Space Complexity --> O(1);

/**
 * @param {character[]} letters
 * @param {character} target
 * @return {character}
 */
var nextGreatestLetter = function(arr, target) {
    let low = 0, high = arr.length-1;
    const n = arr.length

    while(low<=high) {
        let mid = low + Math.floor((high-low)/2);
        if(mid>0 && mid<n-1) {
            if(arr[mid] === target || (arr[mid] < target && arr[mid]> target)) {
                if(arr[mid+1] !== arr[mid]) {
                    return arr[mid+1]
                }
                low = mid +1;
            }else if(target < arr[low]) {
                return arr[low];
            }else if(target >= arr[low] && target < arr[mid]) {
                high = mid-1;
            }else {
                low = mid +1;
            }
        } else if (mid === 0) {
            if(arr[mid] === target ) {
                return arr[mid+1];
            }
            else if(target <arr[mid]) {
                return arr[0];
            }
            else {
                low = mid +1;
            }
        }else {
            if (mid === n-1) {
                if(arr[mid] === target) {
                    return arr[0];
                }
                else if(arr[mid] > target) {
                    return arr[mid];
                }else return arr[0];
            }
        }
    
    }

    return arr[low]
};

Time Complexity --> O(LOGN);
Space Complexity  --> O(1);
