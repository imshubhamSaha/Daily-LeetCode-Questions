/**
 * @param {string[]} arr
 * @param {number} k
 * @return {string}
 */
var kthDistinct = function(arr, k) {
    const n = arr.length;

    let distint_cnt = 0;

    for (let i = 0; i < n; i++) {
        let distint_flg = false;
        for (let j = 0; j < n; j++) {
            if (j === i) continue;

            if (arr[j] === arr[i]) {
                distint_flg = true;
                break;
            }
        }
        if (!distint_flg) 
            distint_cnt++;
        if (distint_cnt === k) return arr[i];
    }

    return "";
};

TIME COMPLEXITY --> O(N * N)
SPACE COMPLEXITY --> O(1)

                   _________________________________________________________________________________________________

/**
 * @param {string[]} arr
 * @param {number} k
 * @return {string}
 */
var kthDistinct = function(arr, k) {
    const n = arr.length;
    const sorted_words = [...arr].sort();

    for (const word of arr) {
        const idx = sorted_words.indexOf(word);

        if (idx === n - 1 || sorted_words[idx] !== sorted_words[idx+1]) 
            k--;
        if (k === 0) return word;    
    }

    return "";
};

TIME COMPLEXITY -->O(N) + O(NLOGN) + O(N * N) ~ O(N * N)
SPACE COMPLEXITY --> O(N)

                   _________________________________________________________________________________________________

var binary_search = function(arr,target) {
    let low = 0;
    let high = arr.length - 1;

    let idx = -1;

    while (low <= high ) {
        let mid = low + Math.floor((high - low)/2);

        if (arr[mid] === target) {
            idx = mid;
            high = mid - 1;
        }
        else if (arr[mid] < target) 
            low = mid + 1;
        else high = mid - 1;    
    } 

    return idx;
}
TIME COMPLEXITY -->O(N) + O(NLOGN) + O(NLOGN) ~ O(NLOGN)
SPACE COMPLEXITY --> O(N)

                   _________________________________________________________________________________________________

/**
 * @param {string[]} arr
 * @param {number} k
 * @return {string}
 */
var kthDistinct = function(arr, k) {
    const n = arr.length;
    const sorted_words = [...arr].sort();

    for (const word of arr) {
        const idx = binary_search(sorted_words, word);

        if (idx === n - 1 || sorted_words[idx] !== sorted_words[idx+1]) 
            k--;
        if (k === 0) return word;    
    }

    return "";
};
/**
 * @param {string[]} arr
 * @param {number} k
 * @return {string}
 */
var kthDistinct = function(arr, k) {
    const n = arr.length;
    const hash_map = {};
    let distinct_cnt = 0;

    for (const word of arr) {
        if (!hash_map[word])
            distinct_cnt++;
        hash_map[word] = (hash_map[word] || 0) + 1;
    }

    if (distinct_cnt < k) return "";

    for (const word of arr) {
        if (hash_map[word] === 1) 
            k--;
        if (k === 0) return word;     
    }

    return "";
};

TIME COMPLEXITY --> O(N) + O(N) ~ O(N)
SPACE COMPLEXITY --> O(N)

                   _________________________________________________________________________________________________
