//User function Template for javascript
class Pair {
    constructor(node, hd) {
        this.node = node;
        this.hd = hd;
    }
}

class MyQueue {
    constructor() {
        this.queue = [];
        this.front = -1;
        this.rear = -1;
        this.len = 0;
    }
    
    enequeue(data) {
        if (this.isEmpty()) 
            this.front++;
            
        this.rear++;
        this.queue[this.rear] = data;
        this.len++;
    }
    
    dequeue() {
        if (this.isEmpty()) 
            return null;
        
        let popped = this.queue[this.front++];
        if (this.front > this.rear) {
            this.front = -1;
            this.rear = -1;
        }
        this.len--;
        return popped;
    }
    
    isEmpty() {
        return this.size() === 0;
    }
    
    size() {
        return this.len;
    }
    
    peak() {
        if (this.isEmpty())
            return null;
            
        return this.queue[this.front];
    }
}
/**
 * @param {Node} root
 * @returns {number[]}
*/

class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    bottomView(root)
    {
        const node_map = new Map(); 
        const queue = new MyQueue(); 
        
        if (!root) 
            return [];
        
        let first = 0;
        queue.enequeue(new Pair(root, 0)); 
        
        while (!queue.isEmpty()) {
            const {node, hd:level} = queue.dequeue();
            node_map.set(level, node.data);
            
            first = Math.min(level, first);
            
            if (node.left) {
                queue.enequeue(new Pair(node.left, level - 1));
            }
            
            if (node.right) {
                queue.enequeue(new Pair(node.right, level + 1));
            }
        }
        
      
        const result = [];
        
        while (node_map.has(first)) {
            result.push(node_map.get(first));
            first++;
        }
        
        return result;
    }
}
