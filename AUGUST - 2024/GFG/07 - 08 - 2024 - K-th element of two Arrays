/**
 * @param {number} k
 * @param {number[]} arr1
 * @param {number[]} arr2

 * @returns {number}
 */

class Solution {
    kthElement(k, arr1, arr2) {
        const n = arr1.length;
        const m = arr2.length;
        
        if (n > m) {
            return this.kthElement(k,arr2,arr1);
        }
        
        let low = Math.max(0, (k - m));
        let high = Math.min(n, k);
        let elements_left = k;
        
        while (low <= high) {
            let m1 = (low + high) >> 1;
            let m2 = elements_left - m1;
            
            let right1 = (m1 < n) ? arr1[m1]:Infinity;
            let right2 = (m2 < m) ? arr2[m2]:Infinity;
            let left1 = (m1 - 1) >= 0 ? arr1[m1-1]: -Infinity;
            let left2 = (m2 - 1) >= 0 ? arr2[m2 - 1]: -Infinity;
            
            if (left1 <= right2 && left2 <= right1) 
                return Math.max(left1, left2);
            
            else if (left1 > right2) high = m1-1;
            else low = m1+1;
        }
        return 0;
    }
}
