/**
 * @param {string} s
 * @return {number}
 */
var minimumDeletions = function(s) {
    const n = s.length;
    const stack = [];
    let removed = 0;

    for (let i = 0; i < n; i++) {
        if (stack.length && stack[stack.length-1] === "b"  && s[i] === "a") {
            stack.pop();
            removed++;
        }else stack.push(s[i]);
    }
    return removed;
};

TIME COMPLEXITY --->>> O(N)
SPACE COMPLEXITY --->>> O(N)


// Optimal approach

/**
 * @param {string} s
 * @return {number}
 */
var minimumDeletions = function(s) {
    const n = s.length;
    let b_occurence = 0;
    let removed = 0;

    for (let i = 0; i < n; i++) {
        if (s[i] === 'b')
            b_occurence++;
        else if (b_occurence && s[i] === 'a') {
            b_occurence--;
            removed++;
        }    
    }
    return removed;
};

TIME COMPLEXITY --->>> O(N)
SPACE COMPLEXITY --->>> O(1)
