/**
 * @param {number[]} mapping
 * @param {integer} num
 * @return {integer} 
 */
var mapping_nums = function(mapping, num) {
    if (num === 0) 
        return mapping[0];

    let encoded_num = 0;
    let multiple = 1;
    while (num > 0) {
        encoded_num += mapping[(num % 10)] * multiple;
        multiple *= 10;
        num = Math.floor(num/10);
    }
    return encoded_num;
}    
/**
 * @param {number[]} mapping
 * @param {number[]} nums
 * @return {number[]}
 */
var sortJumbled = function(mapping, nums) {
    const n = nums.length;
    const mapped_nums = {};

    for (let i = 0; i < n; i++) 
        mapped_nums[nums[i]] = mapping_nums(mapping,nums[i]);

    nums.sort((a,b) => mapped_nums[a] - mapped_nums[b]);

    return nums;
};


TIME COMPLEXITY -->> O(N * LOGM) + O(NLOGN) 
  { O(N) -- LENGTH OF THE NUMS ARRAY, 
      O(LOGM) -- LENGTH OF NUMS[I] ,
        O(NLOG) -- SORTING THE NUMS ARRAY
  }

SPACE COMPLEXITY -->> O(N) -- STORING THE MAPPED NUMS
