/**
 * @param {number[]} rowSum
 * @param {number[]} colSum
 * @return {number[][]}
 */
var restoreMatrix = function(rowSum, colSum) {
    const m = rowSum.length;
    const n = colSum.length;
    const mat = Array.from({length:m}, () => new Array(n).fill(0));
    let r = 0;
    let c = 0;

    while (r < m || c < n) {
        if (r >= m) {
            mat[n-1][c] = colSum[c];
            c++;
            continue;
        } else if (c >= n) {
            mat[r][n-1] = rowSum[r];
            r++;
            continue;
        }

        let val = Math.min(rowSum[r], colSum[c]);
        rowSum[r] -= val;
        colSum[c] -= val;
        mat[r][c] = val;

        if (rowSum[r] === 0) 
            r++;
        if (colSum[c] === 0)
            c++;    
    }

    return mat;
};
