class Solution{
    LCS(s1,s2) {
        const n = s1.length;
        
        const dp = new Array(n+1).fill(0);
        
        for(let i = 1; i <= n; i++) {
            let prev = 0;
            for (let j = 1; j <= n; j++) {
                let curr = dp[j];
                if (s1[j - 1] === s2[i - 1]) 
                    dp[j] = prev + 1;
                else 
                    dp[j] = Math.max(dp[j-1], dp[j]);
                
                prev = curr;    
            }
        }
        
        return dp[n];
    }
    
    countMin(str){
        const len = str.length;
        const rev_str = str.split("").reverse().join("");
        
        return len - this.LCS(str,rev_str);
        
    }
    
}
/*
        TIME COMPLEXITY -->> O(N) + O(N * N) ~ O(N * N)
        SPACE COMPLEXITY -->> O(N) + O(N) ~ O(N)
*/
