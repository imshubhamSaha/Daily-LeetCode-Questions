class MinHeap {
    constructor() {
        this.heap = [];
    }

    push(val) {
        this.heap.push(val);
        this._bubbleUp(this.heap.length - 1);
    }

    pop() {
        if (this.heap.length === 1) return this.heap.pop();
        const min = this.heap[0];
        this.heap[0] = this.heap.pop();
        this._sinkDown(0);
        return min;
    }

    _bubbleUp(index) {
        while (index > 0) {
            let parentIdx = Math.floor((index - 1) / 2);
            if (this.heap[index][0] >= this.heap[parentIdx][0]) break;
            [this.heap[index], this.heap[parentIdx]] = [this.heap[parentIdx], this.heap[index]];
            index = parentIdx;
        }
    }

    _sinkDown(index) {
        const length = this.heap.length;
        const element = this.heap[index];
        while (true) {
            let leftIdx = 2 * index + 1;
            let rightIdx = 2 * index + 2;
            let swap = null;

            if (leftIdx < length) {
                if (this.heap[leftIdx][0] < element[0]) {
                    swap = leftIdx;
                }
            }
            if (rightIdx < length) {
                if ((swap === null && this.heap[rightIdx][0] < element[0]) ||
                    (swap !== null && this.heap[rightIdx][0] < this.heap[swap][0])) {
                    swap = rightIdx;
                }
            }
            if (swap === null) break;
            [this.heap[index], this.heap[swap]] = [this.heap[swap], this.heap[index]];
            index = swap;
        }
    }

    isEmpty() {
        return this.heap.length === 0;
    }
}


class Solution {
    /**
    * @param number n
    * @param number m
    * @param number[][] edges

    * @returns number
    */
    shortestPath(n, m, edges) {
        const dp = Array.from({ length: n + 1 }, () => Array(2).fill(-1));
        let res = [];
        const adj = Array.from({ length: n + 1 }, () => []);

        for (let i = 1; i <= n; i++) 
            dp[i][0] = Number.MAX_SAFE_INTEGER;
    
        dp[1][0] = 0;

        for (let i = 0; i < m; i++) {
            adj[edges[i][0]].push([edges[i][1], edges[i][2]]);
            adj[edges[i][1]].push([edges[i][0], edges[i][2]]);
        }

        const pq = new MinHeap();
        pq.push([0, 1]);  

        while (!pq.isEmpty()) {
            let [dist, x] = pq.pop();
            if (dist > dp[x][0]) continue;

            for (let [neighbor, weight] of adj[x]) {
                if (dp[x][0] + weight < dp[neighbor][0]) {
                    dp[neighbor][0] = dp[x][0] + weight;
                    dp[neighbor][1] = x;
                    pq.push([dp[neighbor][0], neighbor]);
                }
            }
        }

        if (dp[n][1] == -1) 
            return [-1];
    

        res.push(dp[n][0]);
        let i = n;
        while (i >= 1) {
            res.push(i);
            i = dp[i][1];
        }
        res = res.slice(0, 1).concat(res.slice(1).reverse());

        return res;
    }
}
