/**
 * @param {number[]} arr
 * @param {number} n
 * @return {number}
 */
class Solution {
    maxIndexDiff(arr,n) {
       let diff = -1
       
       for(let i=0; i<n; i++) {
           for(let j=n-1; j>i; j--) {
               if(arr[j] >= arr[i]) {
                   diff = Math.max(diff, (j-i))
                   break;
               }
           }
       }
       
       return Math.max(0, diff)
    }
}

Time Complexity --> O(n*n)
Space Complexity --> O(1)


class Solution {
    maxIndexDiff(arr,n) {
        const maxArr = new Array(n+1).fill(-1);
      
        for(let i = maxArr.length-2; i>=0; i--) {
            maxArr[i] = Math.max(arr[i], maxArr[i+1])
        }
        
        let res = -1;
        
        for(let i=0; i<n; i++) {
            let low = i+1, high = n-1, ans = i;
            
            while(low<=high) {
                let mid = low + Math.floor((high-low)/2);
                
                if(maxArr[mid]>=arr[i]){
                    ans = Math.max(ans,mid)
                    low = mid+1
                }else{
                    high = mid-1
                }
            }
            
            res = Math.max(res, ans-i)
        }
      
        return res; 
    }
}


Time Complexity --> O(nlogn)
Space Complexity --> O(n)


class Solution {
    maxIndexDiff(arr,n) {
        const maxArr = new Array(n).fill(0);
        const minArr = new Array(n).fill(0);
        
        minArr[0] = arr[0];
        for(let i=1; i<n; i++) {
            minArr[i] = Math.min(arr[i], minArr[i-1])
        }
        
        maxArr[n-1] = arr[n-1];
        for(let i=n-2; i>=0; i--) {
            maxArr[i] = Math.max(arr[i], maxArr[i+1])
        }
        
        let i=0, j=0, ans = -1
        
        while(i<n && j<n) {
            if(minArr[i] <= maxArr[j]) {
                ans = Math.max(ans, (j-i))
                j = j+1
            }else{
                i = i+1
            }
        }
        
        return ans;
    }
}


Time Complexity --> O(n)
Space Complexity --> O(n)

//Using Stack


/**
 * @param {number[]} arr
 * @param {number} n
 * @return {number}
 */
class Solution {
    maxIndexDiff(arr,n) {
        const stack = [];
        
        for(let i=0; i<n; i++) {
            if(stack.length===0 || arr[stack[stack.length-1]] > arr[i]) {
                stack.push(i)
            } 
        }
        
        let maxDiff = 0
        let temp ;
        let i= n-1;
        
        while(i>=0) {
            if(stack.length && arr[stack[stack.length-1]] <= arr[i]){
               temp = i- stack.pop()
               maxDiff = Math.max(maxDiff, temp)
               
               continue;
            }else {
                i--
            }
        }
        return maxDiff;
    }
}
Time Complexity --> O(n)
Space Complexity --> O(n)
