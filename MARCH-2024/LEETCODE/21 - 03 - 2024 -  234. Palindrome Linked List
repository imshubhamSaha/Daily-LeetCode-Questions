/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
    if (!head || !head.next) return head;
    const stack = [];

    let curr = head;
    while (curr) {
      stack.push(curr.val)
      curr = curr.next;
    }

    curr = head; 
    while ( curr && curr.val === stack.pop() )
      curr = curr.next;
    
    return curr === null
};

*********************************************************************************************************************************************

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
    if ( !head || !head.next ) return head;

    let slow = head;
    let fast = head;

    while (fast && fast.next) {
      slow = slow.next;
      fast = fast.next.next;
    }

    let prev = slow;
    slow = slow.next;
    prev.next = null;

    while (slow) {
      let nextNode = slow.next;
      slow.next = prev;
      prev = slow;
      slow = nextNode;
    }
    fast = head, slow = prev;

    while ( slow ) {
      if (slow.val !== fast.val) 
        return false
      slow = slow.next;
      fast = fast.next;
    } 

    return true;
};
