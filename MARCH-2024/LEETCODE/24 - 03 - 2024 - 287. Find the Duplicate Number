/**
 * @param {number[]} nums
 * @return {number}
 */
var findDuplicate = function(nums) {
  const len = nums.length;
    for (let i = 0; i < len - 1; i++) {
      for (let j = i + 1; j < len; j++) {
        if (nums[j] === nums[i])
          return nums[j];
      }
    }
};

*********************************************************************************************************************************************

/**
 * @param {number[]} nums
 * @return {number}
 */
var findDuplicate = function(nums) {
  const len = nums.length;
  nums.sort((a,b) => a - b);

  for (let i = 1; i < len; i++) {
    if (nums[i-1] === nums[i])
      return nums[i]
  }
};

*********************************************************************************************************************************************

/**
 * @param {number[]} nums
 * @return {number}
 */
var findDuplicate = function(nums) {
  const len = nums.length;
  const numSet = new Set()

  for (let i = 0; i < len; i++) {
    if (numSet.has(nums[i]))
      return nums[i];

    numSet.add(nums[i])
  }
};

*********************************************************************************************************************************************

/**
 * @param {number[]} nums
 * @return {number}
 */
var findDuplicate = function(nums) {
  const len = nums.length;
  for(let i = 0; i < len; i++) {
    if ( nums[Math.abs(nums[i])-1] < 0) {
      return Math.abs(nums[i]);
    }
    nums[Math.abs(nums[i])- 1] = -nums[Math.abs(nums[i])- 1]
  }
};

*********************************************************************************************************************************************

/**
 * @param {number[]} nums
 * @return {number}
 */
var findDuplicate = function(nums) {
  let slow = nums[0];
  let fast = nums[0];

  do {
    slow = nums[slow];
    fast = nums[nums[fast]];
  }while (slow !== fast);

  fast = nums[0];

  while (slow !== fast) {
    slow = nums[slow];
    fast = nums[fast];
  }

  return fast;
};





