class UnionFind:
    def __init__(self, V):
        self.parent = list(range(V))
        self.rank = [1] * V
    
    def find(self, node):
        if self.parent[node] != node:
            self.parent[node] = self.find(self.parent[node]) 
        return self.parent[node]

    def union(self, u, v):
        rootU = self.find(u)
        rootV = self.find(v)
        
        if rootU == rootV:
            return True  
        
        if self.rank[rootU] > self.rank[rootV]:
            self.parent[rootV] = rootU
        elif self.rank[rootU] < self.rank[rootV]:
            self.parent[rootU] = rootV
        else:
            self.parent[rootV] = rootU
            self.rank[rootU] += 1
        return False

class Solution:
	def isCycle(self, V, edges):
		dsu = UnionFind(V)
    
        for u, v in edges:
            if dsu.union(u, v):  
                return True
        return False
