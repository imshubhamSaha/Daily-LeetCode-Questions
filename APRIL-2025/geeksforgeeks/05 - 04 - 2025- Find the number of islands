class Solution:
    def dfs(self, x, y, visited, grid, n, m ):
        directions = [(-1, -1), (-1, 0), (-1, 1),(0, -1),(0, 1),(1, -1),  (1, 0), (1, 1)]
        visited[x][y] = True
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if (0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 'L'):
                self.dfs(nx, ny, visited, grid, n, m )
                
    def numIslands(self, grid):
        n = len(grid)
        m = len(grid[0])
        grid = grid
        visited = [[False] * m for _ in range(n)]
        
        result = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 'L' and not visited[i][j]:
                    self.dfs(i, j,visited, grid, n, m )
                    result += 1
        return result
