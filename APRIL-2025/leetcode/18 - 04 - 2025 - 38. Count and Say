class Solution:
    def encode(self, s : str) -> str:
        sequence = []
        identical_char = 1
        n = len(s)
        for i in range(1, n):
            if s[i] == s[i-1] :
                identical_char += 1
            else :
                sequence.append(f"{identical_char}{s[i-1]}")
                identical_char = 1
        sequence.append(f"{identical_char}{s[-1]}")
        return ''.join(sequence)


    def countAndSay(self, n: int) -> str:
        # Recursive
        if n == 1 :
            return "1"

        return self.encode(self.countAndSay(n-1))


class Solution:
    def encode(self, s : str) -> str:
        sequence = []
        identical_char = 1
        n = len(s)
        for i in range(1, n):
            if s[i] == s[i-1] :
                identical_char += 1
            else :
                sequence.append(f"{identical_char}{s[i-1]}")
                identical_char = 1
        sequence.append(f"{identical_char}{s[-1]}")
        return ''.join(sequence)


    def countAndSay(self, n: int) -> str:
        # Iterative
        sequence = "1"
        for _ in range (n-1) :
            sequence = self.encode(sequence)
        return sequence
