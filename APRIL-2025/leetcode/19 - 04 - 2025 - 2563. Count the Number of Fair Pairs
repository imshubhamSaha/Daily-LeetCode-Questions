class Solution:
    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        n = len(nums)
        fair_pairs = 0

        for i in range(n-1) :
            for j in range(i+1, n) :
                if (nums[i] + nums[j]) >= lower and (nums[i] + nums[j]) <= upper :
                    fair_pairs += 1

        return fair_pairs



class Solution:
    def calcPairs(self, nums:List[int], target : int) -> int :
        pairs = 0
        left , right = 0 , len(nums) - 1

        while left < right :
            if (nums[left] + nums[right]) > target:
                right -= 1
            else :
                pairs += right - left
                left += 1
        return pairs

    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        n = len(nums)
        nums.sort()
        return self.calcPairs(nums, upper) - self.calcPairs(nums, lower - 1)
