class Solution:
    def numberOfPowerfulInt(self, start: int, finish: int, limit: int, s: str) -> int:
        def count_up_to(num: int) -> int:
            bound_str = str(num)
            s_len = len(s)
            n = len(bound_str)
            prefix_len = n - s_len

            if prefix_len < 0:
                return 0  

            dp = [[0] * 2 for _ in range(prefix_len + 1)]
            dp[prefix_len][0] = 1
            suffix = bound_str[prefix_len:]
            dp[prefix_len][1] = int(suffix) >= int(s)

            for i in range(prefix_len - 1, -1, -1) :
                dig = int(bound_str[i])
                dp[i][0] = (limit + 1) * dp[i+1][0]
                if dig <= limit :
                    dp[i][1] = dig * dp[i+1][0] + dp[i+1][1]
                else :
                    dp[i][1] = (limit + 1) * dp[i+1][0]

            return dp[0][1]

        return count_up_to(finish) - count_up_to(start - 1)
