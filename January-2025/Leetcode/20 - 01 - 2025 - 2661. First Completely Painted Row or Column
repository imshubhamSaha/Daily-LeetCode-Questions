/**
 * @param {number[]} arr
 * @param {number[][]} mat
 * @return {number}
 */
var firstCompleteIndex = function(arr, mat) {
    const m = mat.length;
    const n = mat[0].length;
    const k = arr.length;
    const matrix = Array.from({length:m}, () => new Array(n).fill(0));
    const mp = new Map();

    for (let i = 0; i < m ; i++) {
        for (let j = 0; j < n; j++) {
            matrix[i][j] = mat[i][j];
            mp.set(mat[i][j], [i, j]);
        }
    }

    for (let i = 0; i < k; i++) {
        const [idx1, idx2] = mp.get(arr[i]);
        matrix[idx1][idx2] *= -1;
        let postive = false;
        let all = true;
        for (let j = 0; j < n; j++) {
            if (matrix[idx1][j] >= 1) {
                positive = true;
                all = false;
                break;
            }
        }
        if (all) {
            return i;
        }

        all = true;
        positive = false;
        
        for (let j = 0; j < m; j++) {
            if (matrix[j][idx2] >= 1) {
                positive = true;
                all = false;
                break;
            }
        }

        if (all) {
            return i;
        }
    }
};
TC -->> O(m * n) + O(k  * (m + n))
SC -->> O(m * n)


                                                              -------------------------------------------------------------


/**
 * @param {number[]} arr
 * @param {number[][]} mat
 * @return {number}
 */
var firstCompleteIndex = function(arr, mat) {
    const m = mat.length;
    const n = mat[0].length;
    const k = arr.length;
    const mp = new Map();

    for (let i = 0; i < m ; i++) {
        for (let j = 0; j < n; j++) {
            mp.set(mat[i][j], [i, j]);
        }
    }
    const rows = new Array(m).fill(0);
    const cols = new Array(n).fill(0);
    for (let i = 0; i < k; i++) {
        const [r, c] = mp.get(arr[i]);

        rows[r]++;
        cols[c]++;

        if (rows[r] === n || cols[c] === m) 
            return i;
    }
};
TC -->> O(m * n)
SC -->> O(m * n)


                                                              -------------------------------------------------------------
/**
 * @param {number[]} arr
 * @param {number[][]} mat
 * @return {number}
 */
var firstCompleteIndex = function (arr, mat) {
    const m = mat.length;
    const n = mat[0].length;
    const k = arr.length;
    const mp = new Map();
    let minIdx = Number.MAX_SAFE_INTEGER;
    for (let i = 0; i < k; i++) {
        mp.set(arr[i], i);
    }
    for (let i = 0; i < m; i++) {
        let maxIdx = -1;
        for (let j = 0; j < n; j++) {
           const idx = mp.get(mat[i][j]);
           maxIdx = Math.max(maxIdx, idx);
        }

        minIdx = Math.min(minIdx, maxIdx);
    }

    for (let i = 0; i < n; i++) {
        let maxIdx = -1;
        for (let j = 0; j < m; j++) {
           const idx = mp.get(mat[j][i]);
           maxIdx = Math.max(maxIdx, idx);
        }

        minIdx = Math.min(minIdx, maxIdx);
    }
    return minIdx;
};

TC -->> O(m * n) + O(m * n) + O(m * n)
SC -->> O(m * n)


                                                              -------------------------------------------------------------
