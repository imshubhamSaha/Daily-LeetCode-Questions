class Solution {
    productExceptSelf(nums) {
        const n = nums.length;
        if (n === 1) return [1];
        const product = new Array(n).fill(0), rev_product = new Array(n).fill(0);
        product[0] = nums[0];
        rev_product[n-1] = nums[n-1];
        
        for (let i = 1; i < n - 1; i++) {
            product[i] = product[i-1] * nums[i];
            rev_product[n-1-i] = rev_product[n-i] * nums[n-1-i];
        }
        
        const result = new Array(n).fill(0);
        result[0] = rev_product[1];
        result[n-1] = product[n-2];
        
        for(let i = 1; i < n-1; i++) {
            result[i] = product[i-1] * rev_product[i+1];
        }
        
        return result;
    }
}
TC -->. O(n)
SC -->> O(n)
                                                      ----------------------------------------------

class Solution {
    productExceptSelf(arr) {
        const n = arr.length;
        const res = new Array(n).fill(0);
        let product = 1;
        let zeroPresent= false;
        let zerosCnt = 0;
        for (let i = 0; i < n; i++) {
            if (arr[i] === 0) {
                zerosCnt++;
                zeroPresent = true;
                continue;
            }
            
            product *= arr[i];
        }
        
        for (let i = 0; i < n; i++) {
            if (arr[i] === 0) {
                if (zerosCnt === 1) 
                    res[i] = product;
                else res[i] = 0;
            }else {
                if (!zeroPresent) {
                    res[i] = Math.floor(product/arr[i]);
                }
            }
        }
        
        return res;
    }
}

TC -->. O(n)
SC -->> O(1)
                                                      ----------------------------------------------

