class Node {
    constructor(key, value) {
        this.key = key;
        this.value = value;
        this.prev = null;
        this.next = null;
    }
}

// Doubly Linked List to manage the order of elements
class DoublyLinkedList {
    constructor() {
        this.head = new Node(0, 0);
        this.tail = new Node(0, 0);
        this.head.next = this.tail;
        this.tail.prev = this.head;
    }

    addToFront(node) {
        node.next = this.head.next;
        node.prev = this.head;
        this.head.next.prev = node;
        this.head.next = node;
    }

    moveToFront(node) {
        this.remove(node);
        this.addToFront(node);
    }

    remove(node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    removeTail() {
        const lru = this.tail.prev;
        this.remove(lru);
        return lru;
    }
}

class LRUCache {

    constructor(cap) {
        this.capacity = cap; 
        this.map = new Map(); 
        this.dll = new DoublyLinkedList();
    }

    /**
     * @param {number} key
     * @returns {number}
     */

    get(key) {
        if (!this.map.has(key)) {
            return -1; 
        }
        const node = this.map.get(key);
        this.dll.moveToFront(node);
        return node.value;
    }

    /**
     * @param {number} key
     * @param {number} value
     * @return {void}
     */

    put(key, value) {
        if (this.map.has(key)) {
            const node = this.map.get(key);
            node.value = value;
            this.dll.moveToFront(node);
        } else {
            if (this.map.size === this.capacity) {
                const lru = this.dll.removeTail();
                this.map.delete(lru.key);
            }
            const newNode = new Node(key, value);
            this.dll.addToFront(newNode);
            this.map.set(key, newNode);
        }
    }
}
