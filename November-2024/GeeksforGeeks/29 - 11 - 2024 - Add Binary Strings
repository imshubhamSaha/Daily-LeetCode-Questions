
/**
 * @param {string} s1
 * @param {string} s2
 * @returns {string}
 */
class Solution {
    getNum(char) {
        switch(char) {
            case "0" :
                return 0;
            case "1" :
                return 1;
            default :
                return 0;
        }
    } 
    
    addBinary(s1, s2) {
        const n = s1.length;
        const m = s2.length;
        
        const res = [];
        let i = n - 1, j = m - 1;
        let carry = 0;
        
        while (i >= 0 && j >= 0) {
            let num1 = this.getNum(s1[i--]);
            let num2 = this.getNum(s2[j--]);
            let sum = (num1 + num2) + carry;
            res.push(sum%2);
            carry = Math.floor(sum/2);
        } 
        
        while ( i >= 0) {
            let num1 = this.getNum(s1[i--]);
            let sum = (num1) + carry;
            res.push(sum%2);
            carry = Math.floor(sum/2);
        }
        
        while (j >= 0) {
            let num2 = this.getNum(s2[j--]);
            let sum = (num2) + carry;
            res.push(sum%2);
            carry = Math.floor(sum/2);
        }
        
        while (carry) {
            res.push(carry % 2);
            carry = Math.floor(carry/2);
        }
        
        while (res.length && res[res.length-1] === 0 )
            res.pop();
            
        return res.reverse().join("");
    }
}
