class Pair {
    constructor(hd,node) {
        this.node = node;
        this.hd = hd;
    }
}

class Queue {
    constructor() {
        this.queue = [];
        this.front = -1;
        this.rear = -1;
        this.size = 0;
    }
    
    eneque(data) {
        if(this.isEmpty()) {
            this.front++;
        }
        this.rear++;
        this.queue[this.rear] = data;
        this.size++;
    }
    deque(){
        if(this.isEmpty())
            return -1;
        const popped = this.queue[this.front++];
        this.size--;
        if(this.front > this.rear) {
            this.front = -1;
            this.rear = -1;
        }
        
        return popped;
    }
    
    isEmpty() {
        return this.size === 0;
    }
    
    frontElm() {
        if(!this.isEmpty()) {
            return this.queue[this.front];
        }
        return -1;
    }
}

/**
 * @param {Node} root
 * @return {number[]}
*/
class Solution {
  	reverseLevelOrder(root){
  		const hashMap = new Map();
  		const myQueue = new Queue();
  		
  		myQueue.eneque(new Pair(0, root));
  		
  		while(!myQueue.isEmpty()) {
  		    const curr = myQueue.deque();
  		    let arr = []
  		    if(hashMap.has(curr.hd)) {
  		        arr = hashMap.get(curr.hd);
  		    }
  		    arr.push(curr.node.data);
  		    hashMap.set(curr.hd,arr);
  		    if(curr.node.right) {
  		        myQueue.eneque(new Pair(curr.hd + 1, curr.node.right));
  		    }
  		    if(curr.node.left) {
  		        myQueue.eneque(new Pair(curr.hd + 1, curr.node.left));
  		    }
  		}
  		
  		const res = [];
  		for(const [key , val] of hashMap) {
  		    res.push(...val)
  		}
  		return res.reverse();
  	}
}

*********************************************************************************************************************************************


/*
class Node
{
    constructor(x){
        this.data=x;
        this.left=null;
        this.right=null;
    }
}
*/

class Queue {
    constructor() {
        this.queue = [];
        this.front = -1;
        this.rear = -1;
        this.size = 0;
    }
    
    eneque(data) {
        if(this.isEmpty()) {
            this.front++;
        }
        this.rear++;
        this.queue[this.rear] = data;
        this.size++;
    }
    deque(){
        if(this.isEmpty())
            return -1;
        const popped = this.queue[this.front++];
        this.size--;
        if(this.front > this.rear) {
            this.front = -1;
            this.rear = -1;
        }
        
        return popped;
    }
    
    isEmpty() {
        return this.size === 0;
    }
    
    frontElm() {
        if(!this.isEmpty()) {
            return this.queue[this.front];
        }
        return -1;
    }
}

/**
 * @param {Node} root
 * @return {number[]}
*/
class Solution {
  	reverseLevelOrder(root){
  		const myQueue = new Queue();
  		const res = [];
  		myQueue.eneque(root);
  		
  		while(!myQueue.isEmpty()) {
  		    const curr = myQueue.deque();
  		    res.push(curr.data)
  		        
  		    if(curr.right) {
  		        myQueue.eneque(curr.right);
  		    }
  		    if(curr.left) {
  		        myQueue.eneque(curr.left);
  		    }
  		}
  		
  		return res.reverse();
  	}
}
