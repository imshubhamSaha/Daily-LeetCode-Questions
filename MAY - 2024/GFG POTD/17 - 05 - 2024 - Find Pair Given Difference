class Solution {
    /**
    * @param number n
    * @param number x
    * @param number[] arr

    * @returns number
    */
    findPair(n, x, arr) {
        for(let i= 0; i < n-1; i++) {
            for(let j = i + 1; j < n; j++) {
                if(Math.abs(arr[i] - arr[j]) === x) 
                    return 1;
            }
        }
        
        return -1;
    }
}

***********************************************************************************************************************************************************************

class Solution {
    /**
    * @param number n
    * @param number x
    * @param number[] arr

    * @returns number
    */
    findPair(n, x, arr) {
        const pair = new Set();
        
        for(const num of arr) {
            if(pair.has(num-x) || pair.has(num + x))
                return 1;
            pair.add(num);
        }
        return -1;
    }
}


***********************************************************************************************************************************************************************


class Solution {
    /**
    * @param number n
    * @param number x
    * @param number[] arr

    * @returns number
    */
    findPair(n, x, arr) {
        arr.sort((a,b) => a - b);
        
        let i = 0;
        let  j = 1;
        
        while(i < n  &&  j < n) {
            if(Math.abs(arr[i] - arr[j]) === x &&  i !== j)
                return 1;
            if((arr[j] - arr[i]) > x) 
                i++;
            else j++;
        }
        
        return -1;
    }
}
