/**
 * @param {number[]} arr
 * @param {number} n
 * @param {number} k
 * @param {number} x
 * @return {number[]}
 */

class Solution {
    printKClosest(arr, n, k, x) {
        let low = 0;
        let high = n -1;
        while(low < high) {
            let mid = low + Math.floor((high - low)/2);
            
            if(x <= arr[mid]) 
                high = mid;
            else
                low = mid + 1;
        }
        
        let left = low - 1;
        let right = (low < n && arr[low] !== x) ? low : low + 1;
        
        const result = new Array(k).fill(0);
        
        for(let i = 0; i < k; i++) {
            if(left >= 0 && right < n) 
                result[i] = ((arr[right] - x) <= (x - arr[left])) ? arr[right++] : arr[left--];
            else if (left >= 0) 
                result[i] = arr[left--];
            else result[i] = arr[right++];
        }
        
        return result;
    }
}
