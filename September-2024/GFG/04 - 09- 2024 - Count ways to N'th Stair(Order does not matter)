/**
 * @param {number} n
 * @returns {number}
*/

class Solution{
    nthStair(n){
        let ways = 0;
        for (let i = 0; i <= n; i += 2) 
            ways++;
        
        return ways;
    }
}

---------------------

/**
 * @param {number} n
 * @returns {number}
*/

class Solution{
    nthStair(n){
        let zeroStep = 1;
        let firstStep = 1;
        
        for (let i = 2; i <= n; i++) {
            let temp = firstStep;
            firstStep = 1 + Math.min(firstStep,zeroStep)
            zeroStep = temp;
        }
        
        return firstStep;
    }
}

---------------------------
Iterative dp solution


/**
 * @param {number} n
 * @returns {number}
*/

class Solution{
    nthStair(n){
        const dp = new Array(n+1).fill(0);
        dp[0] = 1;
        dp[1] = 1;
        
        for (let i = 2; i <= n; i++) {
            dp[i] = 1 + Math.min(dp[i-1], dp[i-2]);
        }
        
        return dp[n];
    }
}

-------------

Recursive dp approach

/**
 * @param {number} n
 * @returns {number}
*/

class Solution{
    solve (n , dp) {
        if (n === 0 ) return 1;
        if (n === 1) return 1;
        if(dp[n] !== -1) return dp[n];
        
        dp[n] = 1 + Math.min(this.solve(n-1,dp), this.solve(n-2,dp));
        return dp[n];
    }
    
    nthStair(n){
        const dp = new Array(n+1).fill(-1);
        
        return this.solve(n, dp);
    }
}


-------------------------


/**
 * @param {number} n
 * @returns {number}
*/

class Solution{
    nthStair(n){
        return (Math.floor((n+2)/2));
    }
}
