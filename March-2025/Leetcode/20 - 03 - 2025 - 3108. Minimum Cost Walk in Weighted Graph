var getCost = function (source, adjList, visited, components, componentId) {
    let queue = [source];
    visited[source] = true;
    let componentCost = (1 << 17) - 1; 

    while (queue.length > 0) {
        let node = queue.shift();
        components[node] = componentId;

        for (let [neighbor, weight] of adjList[node]) {
            componentCost &= weight;

            if (!visited[neighbor]) {
                visited[neighbor] = true;
                queue.push(neighbor);
            }
        }
    }
    return componentCost;
}
var minimumCost = function (n, edges, query) {
    let adjList = Array.from({ length: n }, () => []);

    for (let [u, v, w] of edges) {
        adjList[u].push([v, w]);
        adjList[v].push([u, w]);
    }

    let visited = new Array(n).fill(false);
    let components = new Array(n).fill(-1); 
    let componentCost = []; 

    let componentId = 0;

    for (let node = 0; node < n; node++) {
        if (!visited[node]) {
            componentCost.push(getCost(node, adjList, visited, components, componentId));
            componentId++;
        }
    }

    let result = [];
    for (let [start, end] of query) {
        if (components[start] === components[end]) {
            result.push(componentCost[components[start]]);
        } else {
            result.push(-1);
        }
    }

    return result;
};
