/**
 * @param {number[]} values
 * @return {number}
 */
var maxScoreSightseeingPair = function(values) {
    const n = values.length;
    let maxScore = -10000000;

    for (let i = 0; i < n - 1; i++) {
        for (let j = i + 1; j < n; j++) {
            const score = (values[i] + values[j]) + (i - j);
            maxScore = Math.max(maxScore, score);
        }Ã¥
    }
    return maxScore;
};
T C -->> O(n * n)
S c -->> O(1)

                                            ----------------------------------------------------------------------

/**
 * @param {number[]} values
 * @return {number}
 */
var maxScoreSightseeingPair = function(values) {
    const n = values.length;
    let maxScore = -10000000;
    const suffix = new Array(n).fill(0);
    suffix[n-1] = values[n-1] - (n - 1);
    for (let i = n - 2; i >= 0; i--) {
        suffix[i] = Math.max(suffix[i+1], (values[i] - i));
    }

    for (let i = 0; i < n - 1; i++) {
        maxScore = Math.max(maxScore, ((values[i] + i) + suffix[i+1]));
    }
    return maxScore;
};

T C -->> O(n + n)
S c -->> O(n)

                                            ----------------------------------------------------------------------

/**
 * @param {number[]} values
 * @return {number}
 */
var maxScoreSightseeingPair = function(values) {
    const n = values.length;
    let maxScore = -10000000;
    let last = values[0];

    for (let i = 1; i < n; i++) {
        maxScore = Math.max(maxScore, last + (values[i] - i));
        last = Math.max(last, values[i] + i);
    }
    return maxScore;
};

T C -->> O(n)
S c -->> O(1)

                                            ----------------------------------------------------------------------
