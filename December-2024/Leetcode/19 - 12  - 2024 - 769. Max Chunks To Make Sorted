/**
 * @param {number[]} arr
 * @return {number}
 */
var maxChunksToSorted = function(arr) {
    const n = arr.length;
    const prefixMax = new Array(n).fill(0);
    const suffixMin = new Array(n).fill(0);
    prefixMax[0] = arr[0];
    suffixMin[n-1] = arr[n-1];
    for (let i = 1; i < n; i++) {
        prefixMax[i] = Math.max(prefixMax[i - 1],arr[i]);
        suffixMin[n-1-i] = Math.min(suffixMin[n-i], arr[n-i-1]);
    }

    let chunks = 0

    for (let i = 0; i < n; i++) {
        if (i === 0 || (suffixMin[i] > prefixMax[i-1]))
            chunks++;
    }

    return chunks;
};
/** 
[1,1,2,3,4]
[0,0,2,3,4]
*/
Time Complexity: O(n) + O(n) + O(1) ~ O(n)
Space Complexity: O(n) + O(n) + O(n) ~ O(n)
                                            -------------------------------------------------------------

/**
 * @param {number[]} arr
 * @return {number}
 */
var maxChunksToSorted = function(arr) {
    const n = arr.length;
    const monoStk = [];

    for (let i = 0; i < n; i++) {
        if ( !monoStk.length || arr[i] > monoStk[monoStk.length-1]) 
            monoStk.push(arr[i]);
        else {
            const max = monoStk[monoStk.length-1];
            while (monoStk.length && arr[i] < monoStk[monoStk.length-1])
                monoStk.pop();
            monoStk.push(max);
        }
    }

    return monoStk.length;
};
/** 
[1,2,3,4]
*/
Time Complexity: O(n)+O(n)=O(n).
Space Complexity: O(n)
                                            -------------------------------------------------------------

/**
 * @param {number[]} arr
 * @return {number}
 */
var maxChunksToSorted = function(arr) {
    const n = arr.length;
    let prfSum = 0;
    let sortedSum = 0;
    let chunks = 0;

    for (let i = 0; i < n; i++) {
        prfSum += arr[i];
        sortedSum += i;

        if (prfSum === sortedSum)
            chunks++;
    }

    return chunks;
};
/** 
10
10
*/
Time Complexity: O(n).
Space Complexity: O(1)
                                            -------------------------------------------------------------

/**
 * @param {number[]} arr
 * @return {number}
 */
var maxChunksToSorted = function(arr) {
    const n = arr.length;
    let maxElm = 0;
    let chunks = 0;

    for (let i = 0; i < n; i++) {
        maxElm = Math.max(maxElm, arr[i]);
        if (maxElm === i)
            chunks++;
    }

    return chunks;
};
/** 
maxElm = [1,1,2,3,4]
*/
Time Complexity: O(n).
Space Complexity: O(1)
                                            -------------------------------------------------------------
