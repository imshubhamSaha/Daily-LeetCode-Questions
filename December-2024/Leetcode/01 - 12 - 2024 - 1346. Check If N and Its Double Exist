/**
 * @param {number[]} arr
 * @return {boolean}
 */
var checkIfExist = function(arr) {
    const n = arr.length;
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (i !== j && (arr[i] === 2 * (arr[j]) || (arr[j] === 2 * arr[i])))
                return true;
        }
    }

    return false;
};
Tc -->> O(n * n)
Sc -->> O(1)

                            *************************************************


var search = function(arr, target) {
    let start = 0;
    let end = arr.length - 1;

    while (start <= end) {
        let mid = (start + end) >> 1;
        if (arr[mid] === target) 
            return true;
        else if (arr[mid] < target) 
            start = mid + 1;
        else end = mid - 1;
    }

    return false;
}
/**
 * @param {number[]} arr
 * @return {boolean}
 */
var checkIfExist = function(arr) {
    const n = arr.length;
    arr.sort((a,b) => a - b);
    let i = 0;
    
    while (i < n) {
        if (arr[i] !== 0 && search(arr,(2 * arr[i]))) {
            return true;
        }   
        if (i < n - 1 && arr[i] === 0 && arr[i+1] === 0) 
            return true;
        i++;    
    }
    return false;
};

Tc -->> O(nlogn)
Sc -->> O(1)

                            *************************************************

/**
 * @param {number[]} arr
 * @return {boolean}
 */
var checkIfExist = function(arr) {
    const hashSet = new Set();

    for (const num of arr) {
        if (hashSet.has(2*num) || hashSet.has(num/2))
            return true;
        hashSet.add(num);
    }

    return false;
};
Tc -->> O(n)
Sc -->> O(n)

                            *************************************************
