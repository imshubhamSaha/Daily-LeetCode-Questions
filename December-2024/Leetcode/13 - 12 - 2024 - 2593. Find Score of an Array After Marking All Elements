/**
 * @param {number[]} nums
 * @return {number}
 */
var findScore = function(nums) {
    const n = nums.length;
    if (n == 1) 
        return nums[0];
    let score = 0;

    for (let i = 0; i < n; i++) {
        let allMarked = true;
        let min = 1000003;
        let idx = -1;
        for (let j = 0; j < n; j++) {
            if (nums[j] > 0 && nums[j] < min) {
                min = nums[j];
                idx = j;
                allMarked = false;
            }
        }
        if (allMarked) 
            return score;
        score += min;
        nums[idx] *= -1;

        if (idx > 0 && idx < n-1) {
            if (nums[idx-1] > 0) 
                nums[idx-1] *= -1;
            if (nums[idx+1] > 0) 
                nums[idx+1] *= -1; 
        }else if (idx === 0) {
            if (nums[idx + 1] > 0) 
                nums[idx+1] *= -1;
        }else {
            if (nums[idx-1] > 0) {
                nums[idx-1] *= -1;
            }
        } 
    }

    return score;
};
TC -> O(n)Ã—O(n)=O(n ^2)
SC -> O(1)


                                        ------------------------------------------------------

/**
 * @param {number[]} nums
 * @return {number}
 */
var findScore = function(nums) {
    const n = nums.length;
    const minHeap = nums.reduce((heap, curr,idx) => {
        heap.push([curr, idx]);
        return heap;
    },[]);

    minHeap.sort((a,b) => a[0] - b[0]);
    let idx = 0;
    const marked = new Array(n).fill(false);

    let score = 0;

    while (idx < n) {
        const [value,position] = minHeap[idx++];

        if (marked[position]) 
            continue;

        score += value;
        marked[position] = true;

        if (position > 0) 
            marked[position-1] = true;
        if (position < n - 1) 
            marked[position + 1] = true;
    }

    return score;


};

Time Complexity: O(nlogn)
Space Complexity: O(n)

                                    -----------------------------------------------------

/**
 * @param {number[]} nums
 * @return {number}
 */
var findScore = function(nums) {
    const n = nums.length;
    const stack = [];
    let idx = 0
    let score = 0;

    while (idx < n) {
        const num = nums[idx++];

        if (!stack.length || num < stack[stack.length-1]) 
            stack.push(num);
        else {
            while (stack.length) {
                score += stack.pop();
                if (stack.length) stack.pop();
            }
        }
    }

    while (stack.length) {
        score += stack.pop();
        if (stack.length) stack.pop();
    }    

    return score;


};


Time Complexity: O(n)
Space Complexity: O(n)
