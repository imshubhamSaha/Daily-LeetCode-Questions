class Solution {
    /**
     * @param {number[]} arr
     * @return {number[][]}
     */
    findTriplets(arr) {
        const n = arr.length;
        
        const res= [];
        
        for (let i = 0; i < n - 2; i++) {
            let sum = arr[i];
            for (let j = i + 1; j < n -1; j++) {
                sum += arr[j];
                for (let k = j + 1; k < n; k++) {
                    sum += arr[k];
                    
                    if (sum === 0) res.push([i, j , k]);
                    
                    sum -= arr[k];
                }
                sum -= arr[j];
            }
        } 
        
        return res;
    }
}
TC -->> O(n * n * n )
SC --> O(1)

                                              ----------------------------------------------------------

class Solution {
    /**
     * @param {number[]} arr
     * @return {number[][]}
     */
    findTriplets(arr) {
        const n = arr.length;
        const trippletMap = new Map();
        const res = [];
        for (let i = 0; i < n - 1; i++) {
            for (let j = i + 1; j < n; j++) {
                const sum = arr[i] + arr[j];
                if (!trippletMap.has(sum))
                    trippletMap.set(sum, []);
                    
                trippletMap.get(sum).push([i,j]);
            }
        }
        
        for (let i = 2; i < n; i++) {
            const rem = - arr[i];
            
            if (trippletMap.has(rem)) {
                for (const [idx,j] of trippletMap.get(rem)) {
                    if (j < i) 
                        res.push([idx,j,i]);
                }
            }
        }
        
        return res;
    }
}

TC -->> O(n * n )
SC --> O(n * n)

                                              ----------------------------------------------------------
