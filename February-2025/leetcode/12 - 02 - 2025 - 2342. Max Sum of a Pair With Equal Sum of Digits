/**
 * @param {number[]} nums
 * @return {number}
 */
var maximumSum = function(nums) {
    const n = nums.length;
    let max = 0;

    for (let i = 0; i < n - 1; i++) {
        let sum = 0;    
        let temp = nums[i];
        while (temp) {
            sum += temp % 10;
            temp = Math.floor(temp/10);
        }
        for (let j = i + 1; j < n; j++) {
            let sum2 = 0;
            let temp2 = nums[j];

            while (temp2) {
                sum2 += temp2 % 10;
                temp2 = Math.floor(temp2/10);
            }

            if (sum2 === sum) {
                max = Math.max(max, (nums[i] + nums[j]));
            }
            
        }
    }

    return max;
};

TC -->> O(n *n * logm)
SC -->> O(1)

                                              -------------------------------------------------------------

/**
 * @param {number[]} nums
 * @return {number}
 */
var maximumSum = function(nums) {
    const n = nums.length;
    let max = -1;
    const mp = new Map();

    for (let i = 0; i < n; i++) {
        let sum = 0;
        let t = nums[i];
        while (t) {
            sum += t % 10;
            t = Math.floor(t/10);
        }

        if (mp.has(sum)) {
            max = Math.max(max, nums[i] + mp.get(sum));
        }
        mp.set(sum, Math.max((mp.get(sum) || 0), nums[i]));
    }
    return max;
};

TC -->> O(n * logm)
SC -->> O(n)

                                              -------------------------------------------------------------
var calculateDigitSum = function (num) {
    let digitSum = 0;
    while (num > 0) {
        digitSum += num % 10;
        num = Math.floor(num / 10);
    }
    return digitSum;
}
var maximumSum = function (nums) {
    const n = nums.length;
    const digitSumPairs = [];

    for (const number of nums) {
        const digitSum = calculateDigitSum(number);
        digitSumPairs.push([ digitSum, number ]);
    }

    digitSumPairs.sort((a, b) => (a[0] - b[0]) || (b[1] - a[1]));

    let maxPairSum = -1;

    for (let index = 1; index < digitSumPairs.length; index++) {
        const currentDigitSum = digitSumPairs[index][0];
        const previousDigitSum = digitSumPairs[index - 1][0];

        if (currentDigitSum == previousDigitSum) {
            const currentSum = digitSumPairs[index][1] + digitSumPairs[index - 1][1];
            maxPairSum = Math.max(maxPairSum, currentSum);
        }
    }

    return maxPairSum;
};
TC -->> O(n * logn)
SC -->> O(n)

                                              -------------------------------------------------------------
