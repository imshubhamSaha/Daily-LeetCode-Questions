/**
 * @param {string} s
 * @param {string} part
 * @return {string}
 */
var removeOccurrences = function(s, part) {
    while (s.includes(part)) {
        const idx = s.indexOf(part);
        if (idx === -1) return s;
        s = s.substring(0, idx) + s.substring(idx+part.length);
    }

    return s;
};

TC -->> O(n ^ 2)/ m
SC -->> O(n) for new String

                                                          --------------------------------------


var matched = function(stk, part) {
    const stack = [...stk];

    for (let j = part.length - 1; j >= 0; j--) {
        if (!stack.length || stack[stack.length -1] !== part[j])
            return false;
        
        stack.pop();
    }

    return true;
}
var removeOccurrences = function(s, part) {
    const n = s.length;
    const m = part.length;
    const stk = [];

    for (let i = 0; i < n; i++) {
        stk.push(s[i]);

        if (stk.length >= m && matched(stk, part)) {
            for (let j = 0; j < m; j++) 
                stk.pop();
        }
    }

    return stk.join("");
};
Tc -->> O(n * n)
SC -->> O(n)

                                              ----------------------------------------------------------------------

var longestPrefixSuffix = function(part) {
    const n = part.length
    const longest = new Array(n).fill(0);

    let preLen = 0;
    let curr = 1;

    while (curr < n) {
        if (part[curr] === part[preLen]) {
            longest[curr] = ++preLen;
            curr++;
        } else if (preLen !== 0) {
            preLen = longest[preLen - 1];
        } else {
            longest[curr] = 0;
            curr++;
        }
    }

    return longest;
}
var removeOccurrences = function (s, part) {
    const n = s.length;
    const m = part.length;
    const lps = longestPrefixSuffix(part);

    const stack = [];
    const matched = new Array(n + 1).fill(0);

    let partIdx = 0;

    for (let i = 0; i < n; i++) {
        const currChar = s[i];
        stack.push(currChar);

        if (currChar === part[partIdx]) {
            matched[stack.length] = ++partIdx;

            if (partIdx === m) {
                for (let j = 0; j < m; j++) {
                    stack.pop();
                }

                partIdx = stack.length ? matched[stack.length] : 0;
            }
        } else {
            if (partIdx !== 0) {
                i--;
                partIdx = lps[partIdx - 1];
                stack.pop();
            } else {
                matched[stack.length] = 0;
            }
        }
    }

    return stack.join('');
};

Tc -->> O(n + m)
SC -->> O(n + m)

                                              ----------------------------------------------------------------------
