class Solution {
    maxLength(s) {
        const n = s.length;
        const stack = [];
        stack.push(-1);
        let maxLen = 0
        for (let i = 0; i < n; i++) {
            if (s[i] === "(") {
                stack.push(i);
            }else {
                stack.pop();
                if (stack.length === 0) {
                    stack.push(i);
                }else {
                    maxLen = Math.max(maxLen, (i - stack[stack.length - 1]));
                }
            }
        }
        
        return maxLen;
    }
}
TC -- >>O(n)
SC -->> O(n)
stack based index check approach

                                                        -----------------------------------------------------------------------------------------\



class Solution {
    maxLength(s) {
        const n = s.length;
        let open = 0;
        let close = 0;
        let maxLen = 0;
        for (let i = 0; i < n; i++) {
            if (s[i] === "(") {
                open++;
            }else {
                close++;
                if (open === close) {
                    maxLen = Math.max(maxLen, close * 2);
                }else {
                    if (close > open) {
                        open = 0;
                        close = 0;
                    }
                }
            }
        }
        
        open = 0;
        close = 0;
        
        for (let i = n - 1; i >= 0; i--) {
            if (s[i] === ')') {
                close++;
            }else {
                open++;
                
                if (open === close) {
                    maxLen = Math.max(maxLen, (close * 2));
                }else  {
                    if (open > close) {
                        open = 0;
                        close = 0;
                    }
                }
            }
        }
        return maxLen;
    }
}

TC -- >>O(n + n)
SC -->> O(1)
two pass two counter approach

                                                        -----------------------------------------------------------------------------------------\
