class Solution {
    kLargest(arr, k) {
        const n = arr.length;
        arr.sort((a,b) => b - a);
        const res = [];
        for (let i = 0; i < k; i++) {
            res.push(arr[i]);
        }
        
        return res;
    }
}
TC -->> O(nlogn)
SC -->> O(k)

                                                      -----------------------------------------------


class MinHeap {
    constructor() {
        this.heap = [];
    }

    push(val) {
        this.heap.push(val);
        this.bubbleUp();
    }

    pop() {
        if (this.heap.length === 1) return this.heap.pop();
        const min = this.heap[0];
        this.heap[0] = this.heap.pop();
        this.bubbleDown();
        return min;
    }

    peek() {
        return this.heap[0];
    }

    size() {
        return this.heap.length;
    }

    bubbleUp() {
        let index = this.heap.length - 1;
        while (index > 0) {
            let parentIndex = Math.floor((index - 1) / 2);
            if (this.heap[parentIndex] <= this.heap[index]) break;
            [this.heap[parentIndex], this.heap[index]] = [this.heap[index], this.heap[parentIndex]];
            index = parentIndex;
        }
    }

    bubbleDown() {
        let index = 0;
        const length = this.heap.length;
        while (true) {
            let leftChild = 2 * index + 1;
            let rightChild = 2 * index + 2;
            let smallest = index;

            if (leftChild < length && this.heap[leftChild] < this.heap[smallest]) {
                smallest = leftChild;
            }

            if (rightChild < length && this.heap[rightChild] < this.heap[smallest]) {
                smallest = rightChild;
            }

            if (smallest === index) break;
            [this.heap[index], this.heap[smallest]] = [this.heap[smallest], this.heap[index]];
            index = smallest;
        }
    }
}

class Solution {
    kLargest(arr, k) {
        const n = arr.length;
        const minHeap = new MinHeap();

        for (let i = 0; i < k; i++) {
            minHeap.push(arr[i]);
        }

        for (let i = k; i < n; i++) {
            if (arr[i] > minHeap.peek()) {
                minHeap.pop();
                minHeap.push(arr[i]);
            }
        }

        const res = [];
        while (minHeap.size() > 0) {
            res.push(minHeap.pop());
        }

        return res.reverse();
    }
}

TC -->> O(k *logk ) + O((n - k) * logk);
SC -->> O(k)
                                                      
