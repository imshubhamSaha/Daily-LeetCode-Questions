
class Solution {
    findTriplet(arr) {
        const n = arr.length;
        arr.sort((a,b) => a-b);
        for (let i = 0; i < n - 2; i++) {
            for (let j = i +1; j < n-1; j++) {
                let sum = arr[i] + arr[j];
                for (let k = j+1; k < n; k++) {
                    if (sum === arr[k]) return true;
                }
            }
        }
        
        return false;
    }
}

Time Complexity -->> O(nlogn) + O(n * n * n)
Space Complexity -->> constant

******************************************************************************************************************************************


class Solution {
    findTriplet(arr) {
        const n = arr.length;
        const set = new Set();
        arr.sort((a,b) => a-b);
        for (let i = 0; i < n-2; i++) {
            for (let j = i+1; j < n; j++) {
                if (set.has(arr[j])) return true;

                set.add(arr[i] + arr[j]);
            }
        }  

        return false;
    }
}
Time Complexity -->> O(nlogn) + O(n * n)
Space Complexity -->> O(n)

******************************************************************************************************************************************

// User function Template for javascript

class Solution {
    findTriplet(arr) {
        const n = arr.length;
        arr.sort((a,b) => a-b);
        for (let i = 2; i < n; i++) {
            let low = 0, high = i - 1;
            
            while (low < high) {
                let sum = arr[low] + arr[high];
                if (sum === arr[i]) 
                    return true;
                else if (sum < arr[i]) 
                    low++;
                else high--;    
            }
        }  

        return false;
    }
}

Time Complexity -->> O(nlogn) + O(n * n)
Space Complexity -->> Constant
